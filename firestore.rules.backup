rules_version = '2';

/**
 * Firestore Security Rules for HouseHelp Application
 * Ensures data security, proper authentication, and role-based access control
 */

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isWorker() {
      return isAuthenticated() && exists(/databases/$(database)/documents/workers/$(request.auth.uid));
    }

    function isHousehold() {
      return isAuthenticated() && exists(/databases/$(database)/documents/households/$(request.auth.uid));
    }

    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isParticipantInConversation(conversationData) {
      return isAuthenticated() && request.auth.uid in conversationData.participants;
    }

    function isValidTimestamp(ts) {
      return ts is timestamp;
    }

    function isValidEmail(email) {
      return email is string && email.matches('^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$');
    }

    function isValidPhone(phone) {
      return phone is string && phone.matches('^\\+?[0-9\\-\\(\\)\\s]{7,}$');
    }

    // --- Workers Collection ---
    match /workers/{workerId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(workerId) && isValidWorkerData();
      allow delete: if isOwner(workerId) || isAdmin();

      function isValidWorkerData() {
        return request.resource.data.keys().hasAll(['fullName', 'email', 'phone', 'services', 'location']) &&
               isValidEmail(request.resource.data.email) &&
               isValidPhone(request.resource.data.phone) &&
               request.resource.data.services is list &&
               request.resource.data.services.size() > 0 &&
               request.resource.data.fullName is string &&
               request.resource.data.location is map;
      }
    }

    // --- Households Collection ---
    match /households/{householdId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(householdId) && isValidHouseholdData();
      allow delete: if isOwner(householdId) || isAdmin();

      function isValidHouseholdData() {
        return request.resource.data.keys().hasAll(['fullName', 'email', 'phone', 'location']) &&
               isValidEmail(request.resource.data.email) &&
               isValidPhone(request.resource.data.phone) &&
               request.resource.data.fullName is string &&
               request.resource.data.location is map;
      }
    }

    // --- Admins Collection ---
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow create, delete: if false; // Only server-side
      allow update: if isOwner(adminId) && isAdmin();
    }

    // --- Jobs Collection ---
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isHousehold() && isValidJobData();
      allow update: if (
        (isOwner(resource.data.householdId) && isValidJobData()) ||
        (isWorker() && canApplyToJob()) ||
        (isAdmin() && isValidJobData())
      );
      allow delete: if isOwner(resource.data.householdId) || isAdmin();

      function isValidJobData() {
        return request.resource.data.keys().hasAll(['title', 'serviceType', 'householdId', 'status']) &&
               request.resource.data.status in ['open', 'in_progress', 'completed', 'cancelled'] &&
               request.resource.data.householdId == request.auth.uid &&
               request.resource.data.title is string &&
               request.resource.data.serviceType is string;
      }

      function canApplyToJob() {
        return request.resource.data.workerId == request.auth.uid &&
               resource.data.status == 'open';
      }
    }

    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.householdId ||
         request.auth.uid == resource.data.workerId ||
         isAdmin());
      allow create, update: if isAuthenticated() && isValidBookingData();
      allow delete: if isOwner(resource.data.householdId) || isAdmin();

      function isValidBookingData() {
        return request.resource.data.keys().hasAll(['jobId', 'householdId', 'workerId', 'status']) &&
               request.resource.data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'] &&
               (request.auth.uid == request.resource.data.householdId ||
                request.auth.uid == request.resource.data.workerId ||
                isAdmin()) &&
               request.resource.data.jobId is string;
      }
    }

    // --- Conversations Collection ---
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && isParticipantInConversation(resource.data);
      allow create, update: if isAuthenticated() && isValidConversationData();
      allow delete: if isAdmin();

      function isValidConversationData() {
        return request.resource.data.keys().hasAll(['participants']) &&
               request.resource.data.participants is list &&
               request.resource.data.participants.size() == 2 &&
               request.auth.uid in request.resource.data.participants;
      }
    }

    // --- Messages Collection ---
    match /messages/{messageId} {
      allow read: if isAuthenticated() && canAccessMessage();
      allow create: if isAuthenticated() && isValidMessageData();
      allow update: if isOwner(resource.data.senderId) && isValidMessageData();
      allow delete: if isOwner(resource.data.senderId) || isAdmin();

      function canAccessMessage() {
        return exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
               isParticipantInConversation(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data);
      }

      function isValidMessageData() {
        return request.resource.data.keys().hasAll(['conversationId', 'senderId', 'content', 'timestamp']) &&
               request.resource.data.senderId == request.auth.uid &&
               isValidTimestamp(request.resource.data.timestamp) &&
               request.resource.data.content is string;
      }
    }

    // --- Reviews Collection ---
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidReviewData();
      allow update: if isOwner(resource.data.householdId) && isValidReviewData();
      allow delete: if isOwner(resource.data.householdId) || isAdmin();

      function isValidReviewData() {
        return request.resource.data.keys().hasAll(['bookingId', 'householdId', 'workerId', 'rating', 'comment']) &&
               request.resource.data.householdId == request.auth.uid &&
               request.resource.data.rating is number &&
               request.resource.data.rating >= 1 &&
               request.resource.data.rating <= 5 &&
               request.resource.data.comment is string;
      }
    }

    // --- Payments Collection ---
    match /payments/{paymentId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.householdId ||
         request.auth.uid == resource.data.workerId ||
         isAdmin());
      allow create, update: if isAuthenticated() && isValidPaymentData();
      allow delete: if isAdmin();

      function isValidPaymentData() {
        return request.resource.data.keys().hasAll(['bookingId', 'householdId', 'workerId', 'amount', 'status']) &&
               request.resource.data.amount is number &&
               request.resource.data.amount > 0 &&
               request.resource.data.status in ['pending', 'processing', 'completed', 'failed', 'refunded'];
      }
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow create, update: if isOwner(request.resource.data.userId) && isValidNotificationData();
      allow delete: if isOwner(resource.data.userId) || isAdmin();

      function isValidNotificationData() {
        return request.resource.data.keys().hasAll(['userId', 'title', 'message', 'type']) &&
               request.resource.data.type in ['job_application', 'booking_confirmed', 'payment_received', 'message_received', 'system'] &&
               request.resource.data.title is string &&
               request.resource.data.message is string;
      }
    }

    // --- Analytics Collection (Admin Only) ---
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // --- System Configuration (Admin Only) ---
    match /config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // --- Audit Logs (Admin Only) ---
    match /audit_logs/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes allowed
    }
  }
}
