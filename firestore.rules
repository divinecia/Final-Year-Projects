rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isWorker() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/workers/$(request.auth.uid));
    }

    function isHousehold() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/households/$(request.auth.uid));
    }

    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admin/$(request.auth.uid));
    }

    // Validation helpers
    function isValidEmail(email) {
      return email is string && 
             email.size() > 0 && 
             email.size() <= 254 &&
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidPhone(phone) {
      return phone is string && 
             phone.size() >= 7 && 
             phone.size() <= 20 &&
             phone.matches('^\\+?[0-9\\-\\(\\)\\s]{7,20}$');
    }

    function isValidString(str, minLen, maxLen) {
      return str is string && 
             str.size() >= minLen && 
             str.size() <= maxLen;
    }

    function isValidPrice(price) {
      return price is number && 
             price >= 0 && 
             price <= 1000000;
    }

    function isValidRating(rating) {
      return rating is number && 
             rating >= 1 && 
             rating <= 5 && 
             rating == int(rating);
    }

    function isValidLocation(location) {
      return location is map &&
             'district' in location &&
             'sector' in location &&
             'cell' in location &&
             location.district is string &&
             location.sector is string &&
             location.cell is string &&
             location.district.size() > 0 &&
             location.sector.size() > 0 &&
             location.cell.size() > 0;
    }

    function isValidServices(services) {
      return services is list &&
             services.size() > 0 &&
             services.size() <= 20;
    }

    // Workers Collection
    match /workers/{workerId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(workerId) && isValidWorkerData();
      allow update: if isOwner(workerId) && isValidWorkerUpdate();
      allow delete: if isOwner(workerId) || isAdmin();

      function isValidWorkerData() {
        let data = request.resource.data;
        return data.keys().hasAll(['fullName', 'email', 'phone', 'services', 'location', 'dateOfBirth', 'gender', 'status', 'createdAt']) &&
               isValidString(data.fullName, 2, 100) &&
               isValidEmail(data.email) &&
               isValidPhone(data.phone) &&
               isValidServices(data.services) &&
               isValidLocation(data.location) &&
               data.dateOfBirth is timestamp &&
               data.gender in ['male', 'female', 'other'] &&
               data.status in ['active', 'inactive', 'suspended', 'pending_verification'] &&
               data.createdAt is timestamp &&
               data.createdAt == request.time;
      }

      function isValidWorkerUpdate() {
        let data = request.resource.data;
        let existingData = resource.data;
        return data.keys().hasAll(['fullName', 'email', 'phone', 'services', 'location', 'dateOfBirth', 'gender', 'status', 'createdAt', 'updatedAt']) &&
               isValidString(data.fullName, 2, 100) &&
               isValidEmail(data.email) &&
               isValidPhone(data.phone) &&
               isValidServices(data.services) &&
               isValidLocation(data.location) &&
               data.dateOfBirth is timestamp &&
               data.gender in ['male', 'female', 'other'] &&
               data.status in ['active', 'inactive', 'suspended', 'pending_verification'] &&
               data.updatedAt is timestamp &&
               data.updatedAt == request.time &&
               data.createdAt == existingData.createdAt;
      }

      match /documents/{documentId} {
        allow read, write: if isOwner(workerId) || isAdmin();
      }

      match /availability/{availabilityId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(workerId);
      }
    }

    // Households Collection
    match /households/{householdId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(householdId) && isValidHouseholdData();
      allow update: if isOwner(householdId) && isValidHouseholdUpdate();
      allow delete: if isOwner(householdId) || isAdmin();

      function isValidHouseholdData() {
        let data = request.resource.data;
        return data.keys().hasAll(['fullName', 'email', 'phone', 'location', 'status', 'createdAt']) &&
               isValidString(data.fullName, 2, 100) &&
               isValidEmail(data.email) &&
               isValidPhone(data.phone) &&
               isValidLocation(data.location) &&
               data.status in ['active', 'inactive', 'suspended'] &&
               data.createdAt is timestamp &&
               data.createdAt == request.time;
      }

      function isValidHouseholdUpdate() {
        let data = request.resource.data;
        let existingData = resource.data;
        return data.keys().hasAll(['fullName', 'email', 'phone', 'location', 'status', 'createdAt', 'updatedAt']) &&
               isValidString(data.fullName, 2, 100) &&
               isValidEmail(data.email) &&
               isValidPhone(data.phone) &&
               isValidLocation(data.location) &&
               data.status in ['active', 'inactive', 'suspended'] &&
               data.updatedAt is timestamp &&
               data.updatedAt == request.time &&
               data.createdAt == existingData.createdAt;
      }
    }

    // Admin Collection
    match /admin/{adminId} {
      allow read: if isAuthenticated() && (request.auth.uid == adminId || isAdmin());
      allow create: if isAuthenticated() && isOwner(adminId) && isValidAdminData();
      allow update: if isOwner(adminId) && isValidAdminUpdate();
      allow delete: if false;

      function isValidAdminData() {
        let data = request.resource.data;
        return data.keys().hasAll(['fullName', 'email', 'role', 'status', 'createdAt']) &&
               isValidString(data.fullName, 2, 100) &&
               isValidEmail(data.email) &&
               data.role in ['super_admin', 'admin', 'moderator'] &&
               data.status in ['active', 'inactive'] &&
               data.createdAt is timestamp &&
               data.createdAt == request.time;
      }

      function isValidAdminUpdate() {
        let data = request.resource.data;
        let existingData = resource.data;
        return data.keys().hasAll(['fullName', 'email', 'role', 'status', 'createdAt', 'updatedAt']) &&
               isValidString(data.fullName, 2, 100) &&
               isValidEmail(data.email) &&
               data.role in ['super_admin', 'admin', 'moderator'] &&
               data.status in ['active', 'inactive'] &&
               data.updatedAt is timestamp &&
               data.updatedAt == request.time &&
               data.createdAt == existingData.createdAt;
      }
    }

    // Jobs Collection
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isHousehold() && isValidJobData();
      allow update: if canUpdateJob() && isValidJobUpdate();
      allow delete: if (isOwner(resource.data.householdId) || isAdmin()) && canDeleteJob();

      function isValidJobData() {
        let data = request.resource.data;
        return data.keys().hasAll(['title', 'description', 'serviceType', 'householdId', 'status', 'location', 'budget', 'createdAt']) &&
               isValidString(data.title, 5, 200) &&
               isValidString(data.description, 10, 2000) &&
               isValidString(data.serviceType, 2, 100) &&
               data.householdId == request.auth.uid &&
               data.status == 'open' &&
               isValidLocation(data.location) &&
               isValidPrice(data.budget) &&
               data.createdAt is timestamp &&
               data.createdAt == request.time;
      }

      function isValidJobUpdate() {
        let data = request.resource.data;
        let existingData = resource.data;
        return data.keys().hasAll(['title', 'description', 'serviceType', 'householdId', 'status', 'location', 'budget', 'createdAt', 'updatedAt']) &&
               isValidString(data.title, 5, 200) &&
               isValidString(data.description, 10, 2000) &&
               isValidString(data.serviceType, 2, 100) &&
               data.householdId == existingData.householdId &&
               data.status in ['open', 'in_progress', 'completed', 'cancelled'] &&
               isValidLocation(data.location) &&
               isValidPrice(data.budget) &&
               data.updatedAt is timestamp &&
               data.updatedAt == request.time &&
               data.createdAt == existingData.createdAt;
      }

      function canUpdateJob() {
        return isOwner(resource.data.householdId) || 
               (isWorker() && 'assignedWorkerId' in resource.data && resource.data.assignedWorkerId == request.auth.uid) ||
               isAdmin();
      }

      function canDeleteJob() {
        return resource.data.status in ['open', 'cancelled'] || isAdmin();
      }

      // Job applications subcollection
      match /applications/{applicationId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == resource.data.workerId ||
          request.auth.uid == get(/databases/$(database)/documents/jobs/$(jobId)).data.householdId ||
          isAdmin()
        );
        allow create: if isWorker() && isValidJobApplication();
        allow update: if canUpdateJobApplication();
        allow delete: if isOwner(resource.data.workerId) || isAdmin();

        function isValidJobApplication() {
          let data = request.resource.data;
          return data.keys().hasAll(['workerId', 'jobId', 'status', 'proposedPrice', 'message', 'createdAt']) &&
                 data.workerId == request.auth.uid &&
                 data.jobId == jobId &&
                 data.status == 'pending' &&
                 isValidPrice(data.proposedPrice) &&
                 isValidString(data.message, 10, 1000) &&
                 data.createdAt is timestamp &&
                 data.createdAt == request.time;
        }

        function canUpdateJobApplication() {
          return isOwner(resource.data.workerId) || 
                 request.auth.uid == get(/databases/$(database)/documents/jobs/$(jobId)).data.householdId ||
                 isAdmin();
        }
      }
    }

    // Bookings Collection
    match /bookings/{bookingId} {
      allow read: if canAccessBooking();
      allow create: if isAuthenticated() && isValidBookingData();
      allow update: if canUpdateBooking() && isValidBookingUpdate();
      allow delete: if (isOwner(resource.data.householdId) || isAdmin()) && canDeleteBooking();

      function canAccessBooking() {
        return isAuthenticated() &&
               (request.auth.uid == resource.data.householdId ||
                request.auth.uid == resource.data.workerId ||
                isAdmin());
      }

      function isValidBookingData() {
        let data = request.resource.data;
        return data.keys().hasAll(['jobId', 'householdId', 'workerId', 'status', 'scheduledDate', 'estimatedPrice', 'createdAt']) &&
               isValidString(data.jobId, 1, 100) &&
               isValidString(data.householdId, 1, 100) &&
               isValidString(data.workerId, 1, 100) &&
               data.status == 'pending' &&
               data.scheduledDate is timestamp &&
               data.scheduledDate > request.time &&
               isValidPrice(data.estimatedPrice) &&
               data.createdAt is timestamp &&
               data.createdAt == request.time &&
               (request.auth.uid == data.householdId || request.auth.uid == data.workerId);
      }

      function isValidBookingUpdate() {
        let data = request.resource.data;
        let existingData = resource.data;
        return data.keys().hasAll(['jobId', 'householdId', 'workerId', 'status', 'scheduledDate', 'estimatedPrice', 'createdAt', 'updatedAt']) &&
               data.jobId == existingData.jobId &&
               data.householdId == existingData.householdId &&
               data.workerId == existingData.workerId &&
               data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'] &&
               data.scheduledDate is timestamp &&
               isValidPrice(data.estimatedPrice) &&
               data.updatedAt is timestamp &&
               data.updatedAt == request.time &&
               data.createdAt == existingData.createdAt;
      }

      function canUpdateBooking() {
        return isOwner(resource.data.householdId) ||
               isOwner(resource.data.workerId) ||
               isAdmin();
      }

      function canDeleteBooking() {
        return resource.data.status in ['pending', 'cancelled'] || isAdmin();
      }
    }

    // Reviews Collection
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidReviewData();
      allow update: if isOwner(resource.data.householdId) && isValidReviewUpdate();
      allow delete: if isOwner(resource.data.householdId) || isAdmin();

      function isValidReviewData() {
        let data = request.resource.data;
        return data.keys().hasAll(['bookingId', 'householdId', 'workerId', 'rating', 'comment', 'createdAt']) &&
               isValidString(data.bookingId, 1, 100) &&
               data.householdId == request.auth.uid &&
               isValidString(data.workerId, 1, 100) &&
               isValidRating(data.rating) &&
               isValidString(data.comment, 5, 2000) &&
               data.createdAt is timestamp &&
               data.createdAt == request.time &&
               exists(/databases/$(database)/documents/bookings/$(data.bookingId)) &&
               get(/databases/$(database)/documents/bookings/$(data.bookingId)).data.status == 'completed' &&
               get(/databases/$(database)/documents/bookings/$(data.bookingId)).data.householdId == request.auth.uid;
      }

      function isValidReviewUpdate() {
        let data = request.resource.data;
        let existingData = resource.data;
        return data.keys().hasAll(['bookingId', 'householdId', 'workerId', 'rating', 'comment', 'createdAt', 'updatedAt']) &&
               data.bookingId == existingData.bookingId &&
               data.householdId == existingData.householdId &&
               data.workerId == existingData.workerId &&
               isValidRating(data.rating) &&
               isValidString(data.comment, 5, 2000) &&
               data.createdAt == existingData.createdAt &&
               data.updatedAt is timestamp &&
               data.updatedAt == request.time;
      }
    }

    // System Collections
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    match /config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /metadata/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
